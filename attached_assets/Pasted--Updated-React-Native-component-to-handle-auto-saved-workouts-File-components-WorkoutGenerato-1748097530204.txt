// Updated React Native component to handle auto-saved workouts
// File: components/WorkoutGenerator.js (or your equivalent)

import React, { useState } from 'react';
import { View, Text, Button, Alert, ActivityIndicator } from 'react-native';
import { useNavigation } from '@react-navigation/native';

export function WorkoutGenerator({ userId, preferences }) {
  const [loading, setLoading] = useState(false);
  const [generatedWorkout, setGeneratedWorkout] = useState(null);
  const navigation = useNavigation();

  const generateWorkout = async () => {
    setLoading(true);
    try {
      const response = await fetch('YOUR_API_URL/api/generate-workout', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${userToken}`
        },
        body: JSON.stringify({
          userId,
          preferences: preferences.workoutType,
          duration: preferences.duration,
          difficulty: preferences.difficulty,
          equipment: preferences.equipment
        })
      });

      const data = await response.json();
      
      if (data.success) {
        setGeneratedWorkout(data.workout);
        
        // Show success notification
        Alert.alert(
          '✅ Workout Generated!',
          'Your workout has been automatically saved to your library.',
          [
            {
              text: 'View in Library',
              onPress: () => navigation.navigate('Library', { 
                highlightWorkoutId: data.workout.id 
              })
            },
            {
              text: 'Start Now',
              onPress: () => navigation.navigate('WorkoutPlayer', { 
                workout: data.workout 
              }),
              style: 'default'
            }
          ]
        );
      } else {
        Alert.alert('Error', 'Failed to generate workout. Please try again.');
      }
    } catch (error) {
      console.error('Error:', error);
      Alert.alert('Error', 'Something went wrong. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <View style={styles.container}>
      {loading ? (
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#007AFF" />
          <Text style={styles.loadingText}>
            🤖 AI Agent is creating your personalized workout...
          </Text>
        </View>
      ) : generatedWorkout ? (
        <View style={styles.successContainer}>
          <Text style={styles.successIcon}>✅</Text>
          <Text style={styles.successTitle}>Workout Ready!</Text>
          <Text style={styles.successMessage}>
            "{generatedWorkout.name}" has been added to your library
          </Text>
          
          <View style={styles.actionButtons}>
            <Button
              title="Generate Another"
              onPress={() => {
                setGeneratedWorkout(null);
                generateWorkout();
              }}
            />
            <Button
              title="View in Library"
              onPress={() => navigation.navigate('Library')}
              color="#007AFF"
            />
          </View>
        </View>
      ) : (
        <View style={styles.generateContainer}>
          <Text style={styles.title}>Ready to Generate a Workout?</Text>
          <Text style={styles.subtitle}>
            Your AI agent will create and save a personalized routine
          </Text>
          <Button
            title="Generate Workout"
            onPress={generateWorkout}
            color="#007AFF"
          />
        </View>
      )}
    </View>
  );
}

// Updated Library component to show auto-generated workouts
// File: components/WorkoutLibrary.js

export function WorkoutLibrary({ userId, route }) {
  const [workouts, setWorkouts] = useState([]);
  const [loading, setLoading] = useState(true);
  const highlightWorkoutId = route.params?.highlightWorkoutId;

  useEffect(() => {
    loadWorkouts();
  }, []);

  const loadWorkouts = async () => {
    try {
      const snapshot = await db
        .collection('workouts')
        .where('userId', '==', userId)
        .orderBy('createdAt', 'desc')
        .get();

      const workoutList = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));

      setWorkouts(workoutList);
    } catch (error) {
      console.error('Error loading workouts:', error);
    } finally {
      setLoading(false);
    }
  };

  const renderWorkoutItem = ({ item }) => {
    const isHighlighted = item.id === highlightWorkoutId;
    const isAutoGenerated = item.autoGenerated;

    return (
      <TouchableOpacity
        style={[
          styles.workoutCard,
          isHighlighted && styles.highlightedCard
        ]}
        onPress={() => navigation.navigate('WorkoutDetail', { workout: item })}
      >
        <View style={styles.workoutHeader}>
          <Text style={styles.workoutName}>{item.name}</Text>
          {isAutoGenerated && (
            <View style={styles.agentBadge}>
              <Text style={styles.agentBadgeText}>🤖 AI Generated</Text>
            </View>
          )}
        </View>
        
        <Text style={styles.workoutDescription}>{item.description}</Text>
        
        <View style={styles.workoutMeta}>
          <Text style={styles.metaText}>⏱ {item.duration} min</Text>
          <Text style={styles.metaText}>💪 {item.difficulty}</Text>
          <Text style={styles.metaText}>🔥 {item.estimatedCalories} cal</Text>
        </View>
        
        <View style={styles.tagContainer}>
          {item.tags.map((tag, index) => (
            <View key={index} style={styles.tag}>
              <Text style={styles.tagText}>#{tag}</Text>
            </View>
          ))}
        </View>
      </TouchableOpacity>
    );
  };

  return (
    <View style={styles.container}>
      <FlatList
        data={workouts}
        renderItem={renderWorkoutItem}
        keyExtractor={item => item.id}
        refreshing={loading}
        onRefresh={loadWorkouts}
        ListEmptyComponent={
          <Text style={styles.emptyText}>
            No workouts yet. Generate your first workout!
          </Text>
        }
      />
    </View>
  );
}