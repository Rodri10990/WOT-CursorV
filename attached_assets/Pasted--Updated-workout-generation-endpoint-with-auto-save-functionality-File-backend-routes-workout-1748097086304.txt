// Updated workout generation endpoint with auto-save functionality
// File: backend/routes/workouts.js (or wherever your endpoint is located)

const admin = require('firebase-admin');
const db = admin.firestore();

// Enhanced workout generation endpoint
app.post('/api/generate-workout', async (req, res) => {
  try {
    const { userId, preferences, duration, difficulty, equipment } = req.body;
    
    // Generate workout using OpenAI
    const workout = await generateWorkoutWithOpenAI({
      preferences,
      duration,
      difficulty,
      equipment
    });
    
    // NEW: Auto-save to library with agent metadata
    const workoutDoc = {
      ...workout,
      userId,
      createdAt: admin.firestore.FieldValue.serverTimestamp(),
      createdBy: 'ai-agent',
      status: 'active',
      autoGenerated: true,
      metadata: {
        generationParams: {
          preferences,
          duration,
          difficulty,
          equipment
        },
        version: '1.0',
        lastModified: admin.firestore.FieldValue.serverTimestamp()
      },
      // Add initial analytics
      analytics: {
        timesCompleted: 0,
        lastCompleted: null,
        averageRating: null,
        feedback: []
      }
    };
    
    // Save to Firestore
    const docRef = await db.collection('workouts').add(workoutDoc);
    
    // Return workout with its new ID
    res.json({
      success: true,
      workout: {
        id: docRef.id,
        ...workout
      },
      message: 'Workout generated and automatically saved to your library',
      savedToLibrary: true
    });
    
  } catch (error) {
    console.error('Error generating workout:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to generate workout'
    });
  }
});

// Helper function to generate workout with OpenAI (updated)
async function generateWorkoutWithOpenAI({ preferences, duration, difficulty, equipment }) {
  const prompt = `Create a ${duration}-minute ${difficulty} workout routine.
Equipment available: ${equipment.join(', ')}
User preferences: ${preferences}

Generate a structured workout with:
1. Warm-up (5 minutes)
2. Main workout
3. Cool-down (5 minutes)

Include exercise names, duration, sets, reps, and brief descriptions.
Format as JSON.`;

  const completion = await openai.createChatCompletion({
    model: "gpt-4",
    messages: [
      {
        role: "system",
        content: "You are an expert fitness trainer AI agent. Generate comprehensive, safe, and effective workout routines."
      },
      {
        role: "user",
        content: prompt
      }
    ],
    temperature: 0.7
  });

  const workoutData = JSON.parse(completion.data.choices[0].message.content);
  
  // Add agent-specific enhancements
  return {
    ...workoutData,
    name: workoutData.name || `${difficulty} ${duration}-min Workout`,
    description: workoutData.description || `AI-generated ${difficulty} workout focusing on ${preferences}`,
    tags: generateSmartTags({ preferences, difficulty, equipment, workoutData }),
    estimatedCalories: calculateEstimatedCalories(duration, difficulty),
    targetMuscleGroups: extractMuscleGroups(workoutData)
  };
}

// Smart tag generation for better organization
function generateSmartTags({ preferences, difficulty, equipment, workoutData }) {
  const tags = [];
  
  // Basic tags
  tags.push(difficulty.toLowerCase());
  tags.push(`${duration}min`);
  
  // Equipment tags
  equipment.forEach(item => {
    if (item !== 'none') tags.push(item.toLowerCase());
  });
  
  // Preference-based tags
  if (preferences.includes('cardio')) tags.push('cardio');
  if (preferences.includes('strength')) tags.push('strength');
  if (preferences.includes('flexibility')) tags.push('flexibility');
  
  // Auto-detect workout type from exercises
  const exerciseNames = JSON.stringify(workoutData).toLowerCase();
  if (exerciseNames.includes('squat') || exerciseNames.includes('lunge')) tags.push('legs');
  if (exerciseNames.includes('push-up') || exerciseNames.includes('bench')) tags.push('chest');
  if (exerciseNames.includes('plank') || exerciseNames.includes('crunch')) tags.push('core');
  
  return [...new Set(tags)]; // Remove duplicates
}

// Calculate estimated calories (basic formula)
function calculateEstimatedCalories(duration, difficulty) {
  const baseCaloriesPerMinute = {
    'beginner': 5,
    'intermediate': 8,
    'advanced': 11
  };
  
  return Math.round(duration * (baseCaloriesPerMinute[difficulty.toLowerCase()] || 8));
}

// Extract muscle groups from workout
function extractMuscleGroups(workoutData) {
  const muscleGroups = new Set();
  
  // Analysis logic to detect muscle groups from exercise names
  // This is a simplified version - you can make it more sophisticated
  const exerciseText = JSON.stringify(workoutData).toLowerCase();
  
  const muscleKeywords = {
    'chest': ['push-up', 'bench press', 'fly', 'chest'],
    'back': ['pull-up', 'row', 'lat', 'back'],
    'legs': ['squat', 'lunge', 'leg', 'calf', 'hamstring'],
    'shoulders': ['shoulder', 'overhead press', 'lateral raise'],
    'arms': ['bicep', 'tricep', 'curl', 'arm'],
    'core': ['plank', 'crunch', 'abs', 'core']
  };
  
  for (const [muscle, keywords] of Object.entries(muscleKeywords)) {
    if (keywords.some(keyword => exerciseText.includes(keyword))) {
      muscleGroups.add(muscle);
    }
  }
  
  return Array.from(muscleGroups);
}