// client/src/pages/Library.tsx - Fixed library component to display auto-saved workouts

import React, { useState, useEffect } from 'react';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Clock, Flame, Dumbbell, Bot, User } from 'lucide-react';
import { useNavigate } from 'wouter';
import { useAuthStore } from '@/lib/store';

interface Workout {
  id: number;
  name: string;
  description: string;
  duration: number;
  difficulty: string;
  createdBy: string;
  autoGenerated: boolean;
  metadata: {
    exercises: {
      warmup: any[];
      main: any[];
      cooldown: any[];
    };
    generationParams?: any;
    aiModel?: string;
  };
  tags: string[];
  estimatedCalories: number;
  targetMuscleGroups: string[];
  analytics: {
    timesCompleted: number;
    lastCompleted: string | null;
  };
  createdAt: string;
}

export function Library() {
  const [workouts, setWorkouts] = useState<Workout[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const navigate = useNavigate();
  const { user } = useAuthStore();

  useEffect(() => {
    fetchWorkouts();
  }, []);

  const fetchWorkouts = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await fetch('/api/workouts', {
        headers: {
          'Authorization': `Bearer ${user?.token}`
        }
      });
      
      if (!response.ok) {
        throw new Error(`Failed to fetch workouts: ${response.statusText}`);
      }
      
      const data = await response.json();
      console.log('Fetched workouts:', data);
      
      // Ensure data is an array
      const workoutList = Array.isArray(data) ? data : data.workouts || [];
      
      // Sort by creation date, newest first
      workoutList.sort((a, b) => 
        new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
      );
      
      setWorkouts(workoutList);
    } catch (err) {
      console.error('Error fetching workouts:', err);
      setError(err.message || 'Failed to load workouts');
    } finally {
      setLoading(false);
    }
  };

  const startWorkout = (workout: Workout) => {
    // Navigate to workout player with the workout data
    navigate(`/workout/${workout.id}`);
  };

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty.toLowerCase()) {
      case 'beginner':
        return 'bg-green-500';
      case 'intermediate':
        return 'bg-yellow-500';
      case 'advanced':
        return 'bg-red-500';
      default:
        return 'bg-gray-500';
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-center py-8">
        <p className="text-red-500 mb-4">{error}</p>
        <Button onClick={fetchWorkouts}>Try Again</Button>
      </div>
    );
  }

  if (workouts.length === 0) {
    return (
      <div className="text-center py-12">
        <Bot className="mx-auto h-16 w-16 text-gray-400 mb-4" />
        <h3 className="text-xl font-semibold mb-2">No workouts yet</h3>
        <p className="text-gray-500 mb-6">
          Ask your AI trainer to create your first workout!
        </p>
        <Button onClick={() => navigate('/trainer')}>
          Go to AI Trainer
        </Button>
      </div>
    );
  }

  return (
    <div className="space-y-4 pb-20">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">My Workouts</h1>
        <Badge variant="outline" className="text-sm">
          {workouts.length} workout{workouts.length !== 1 ? 's' : ''}
        </Badge>
      </div>

      {workouts.map((workout) => (
        <Card key={workout.id} className="overflow-hidden">
          <CardHeader>
            <div className="flex justify-between items-start">
              <div className="flex-1">
                <CardTitle className="flex items-center gap-2">
                  {workout.name}
                  {workout.autoGenerated && (
                    <Badge variant="secondary" className="ml-2">
                      <Bot className="w-3 h-3 mr-1" />
                      AI Generated
                    </Badge>
                  )}
                </CardTitle>
                <CardDescription className="mt-1">
                  {workout.description}
                </CardDescription>
              </div>
              <Badge className={getDifficultyColor(workout.difficulty)}>
                {workout.difficulty}
              </Badge>
            </div>
          </CardHeader>
          
          <CardContent>
            <div className="grid grid-cols-3 gap-4 mb-4">
              <div className="flex items-center gap-2 text-sm text-gray-600">
                <Clock className="w-4 h-4" />
                <span>{workout.duration} min</span>
              </div>
              <div className="flex items-center gap-2 text-sm text-gray-600">
                <Flame className="w-4 h-4" />
                <span>{workout.estimatedCalories} cal</span>
              </div>
              <div className="flex items-center gap-2 text-sm text-gray-600">
                <Dumbbell className="w-4 h-4" />
                <span>{workout.analytics.timesCompleted}x</span>
              </div>
            </div>

            {/* Exercise breakdown */}
            {workout.metadata?.exercises && (
              <div className="text-sm text-gray-600 mb-4">
                <span className="font-medium">Exercises:</span>{' '}
                {workout.metadata.exercises.warmup.length} warmup,{' '}
                {workout.metadata.exercises.main.length} main,{' '}
                {workout.metadata.exercises.cooldown.length} cooldown
              </div>
            )}

            {/* Tags */}
            {workout.tags && workout.tags.length > 0 && (
              <div className="flex flex-wrap gap-2 mb-4">
                {workout.tags.map((tag, index) => (
                  <Badge key={index} variant="outline" className="text-xs">
                    #{tag}
                  </Badge>
                ))}
              </div>
            )}

            {/* Muscle groups */}
            {workout.targetMuscleGroups && workout.targetMuscleGroups.length > 0 && (
              <div className="text-sm text-gray-600 mb-4">
                <span className="font-medium">Targets:</span>{' '}
                {workout.targetMuscleGroups.join(', ')}
              </div>
            )}

            <div className="flex gap-2">
              <Button 
                onClick={() => startWorkout(workout)}
                className="flex-1"
              >
                Start Workout
              </Button>
              <Button 
                variant="outline"
                onClick={() => navigate(`/workout/${workout.id}/details`)}
              >
                View Details
              </Button>
            </div>
          </CardContent>
        </Card>
      ))}
    </div>
  );
}

// client/src/pages/Trainer.tsx - Update to show workout generation status

import { useState, useEffect } from 'react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Bot, Send, Sparkles } from 'lucide-react';
import { useNavigate } from 'wouter';

export function Trainer() {
  const [messages, setMessages] = useState<Array<{ role: string; content: string }>>([]);
  const [input, setInput] = useState('');
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();

  const sendMessage = async () => {
    if (!input.trim() || loading) return;

    const userMessage = input.trim();
    setInput('');
    setMessages(prev => [...prev, { role: 'user', content: userMessage }]);
    setLoading(true);

    try {
      const response = await fetch('/api/trainer/message', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        },
        body: JSON.stringify({ 
          message: userMessage,
          userId: localStorage.getItem('userId') 
        })
      });

      const data = await response.json();
      
      setMessages(prev => [...prev, { 
        role: 'assistant', 
        content: data.response 
      }]);

      // If a workout was generated, show a notification
      if (data.workoutGenerated && data.workoutId) {
        setTimeout(() => {
          if (confirm('Your workout has been saved! Would you like to view it in your library?')) {
            navigate('/library');
          }
        }, 1000);
      }
    } catch (error) {
      console.error('Error sending message:', error);
      setMessages(prev => [...prev, { 
        role: 'assistant', 
        content: 'Sorry, I encountered an error. Please try again.' 
      }]);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="flex flex-col h-full">
      {/* Chat messages */}
      <div className="flex-1 overflow-y-auto space-y-4 p-4 pb-20">
        {messages.length === 0 && (
          <Card className="p-6 text-center">
            <Bot className="w-12 h-12 mx-auto mb-4 text-primary" />
            <h3 className="text-lg font-semibold mb-2">Your AI Fitness Trainer</h3>
            <p className="text-gray-600 mb-4">
              I can create personalized workouts, answer fitness questions, and track your progress.
            </p>
            <div className="grid gap-2 text-sm">
              <Button
                variant="outline"
                onClick={() => setInput('Create a 30-minute strength workout')}
                className="justify-start"
              >
                <Sparkles className="w-4 h-4 mr-2" />
                Create a strength workout
              </Button>
              <Button
                variant="outline"
                onClick={() => setInput('Design a beginner cardio routine')}
                className="justify-start"
              >
                <Sparkles className="w-4 h-4 mr-2" />
                Design a cardio routine
              </Button>
              <Button
                variant="outline"
                onClick={() => setInput('Build a 20-minute HIIT workout')}
                className="justify-start"
              >
                <Sparkles className="w-4 h-4 mr-2" />
                Build a HIIT workout
              </Button>
            </div>
          </Card>
        )}

        {messages.map((message, index) => (
          <div
            key={index}
            className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}
          >
            <Card className={`max-w-sm p-3 ${
              message.role === 'user' ? 'bg-primary text-white' : ''
            }`}>
              <p className="text-sm whitespace-pre-wrap">{message.content}</p>
            </Card>
          </div>
        ))}
        
        {loading && (
          <div className="flex justify-start">
            <Card className="p-3">
              <div className="flex space-x-1">
                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" />
                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce delay-100" />
                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce delay-200" />
              </div>
            </Card>
          </div>
        )}
      </div>

      {/* Input area */}
      <div className="fixed bottom-16 left-0 right-0 bg-white border-t p-4">
        <div className="flex gap-2 max-w-2xl mx-auto">
          <Input
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
            placeholder="Ask me to create a workout..."
            disabled={loading}
          />
          <Button onClick={sendMessage} disabled={loading || !input.trim()}>
            <Send className="w-4 h-4" />
          </Button>
        </div>
      </div>
    </div>
  );
}