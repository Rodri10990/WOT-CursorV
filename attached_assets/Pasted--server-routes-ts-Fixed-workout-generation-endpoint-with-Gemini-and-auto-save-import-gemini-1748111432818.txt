// server/routes.ts - Fixed workout generation endpoint with Gemini and auto-save

import { geminiHelper } from './helpers/gemini';
import { db } from './storage';
import { workouts, type Workout } from '../shared/schema';

// Generate workout with Gemini and auto-save to database
app.post('/api/generate-workout', async (req, res) => {
  try {
    const { userId, preferences, duration, difficulty } = req.body;
    
    if (!userId) {
      return res.status(401).json({ error: 'User not authenticated' });
    }

    // Generate workout using Gemini
    const prompt = `Generate a ${duration}-minute ${difficulty} fitness workout routine.
    User preferences: ${preferences || 'general fitness'}
    
    Return ONLY valid JSON in this exact format, no other text:
    {
      "name": "Workout name",
      "description": "Brief description",
      "duration": ${duration},
      "difficulty": "${difficulty}",
      "warmup": [
        {
          "name": "Exercise name",
          "duration": "seconds",
          "instructions": "How to perform"
        }
      ],
      "main": [
        {
          "name": "Exercise name",
          "sets": number,
          "reps": "number or time",
          "rest": "seconds",
          "instructions": "How to perform"
        }
      ],
      "cooldown": [
        {
          "name": "Exercise name",
          "duration": "seconds",
          "instructions": "How to perform"
        }
      ]
    }`;

    const geminiResponse = await geminiHelper.generateContent(prompt);
    
    // Extract JSON from Gemini response
    let workoutData;
    try {
      // Clean the response - Gemini sometimes adds markdown or extra text
      const jsonMatch = geminiResponse.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('No JSON found in response');
      }
      workoutData = JSON.parse(jsonMatch[0]);
    } catch (parseError) {
      console.error('Failed to parse Gemini response:', geminiResponse);
      throw new Error('Invalid workout format from AI');
    }

    // Prepare workout for database with enhanced metadata
    const workoutToSave = {
      userId,
      name: workoutData.name || `${difficulty} ${duration}-min Workout`,
      description: workoutData.description || `AI-generated ${difficulty} workout`,
      duration: workoutData.duration || duration,
      difficulty: workoutData.difficulty || difficulty,
      createdBy: 'ai-agent',
      autoGenerated: true,
      metadata: {
        generationParams: {
          preferences,
          duration,
          difficulty
        },
        exercises: {
          warmup: workoutData.warmup || [],
          main: workoutData.main || [],
          cooldown: workoutData.cooldown || []
        },
        version: '1.0',
        generatedAt: new Date().toISOString(),
        aiModel: 'gemini'
      },
      tags: generateTags(workoutData, preferences, difficulty),
      estimatedCalories: calculateCalories(duration, difficulty),
      targetMuscleGroups: extractMuscleGroups(workoutData),
      analytics: {
        timesCompleted: 0,
        lastCompleted: null,
        averageRating: null,
        feedback: []
      }
    };

    // Save to database using Drizzle
    const [savedWorkout] = await db
      .insert(workouts)
      .values(workoutToSave)
      .returning();

    if (!savedWorkout) {
      throw new Error('Failed to save workout to database');
    }

    console.log('Workout auto-saved:', savedWorkout.id);

    // Return success response
    res.json({
      success: true,
      workout: {
        id: savedWorkout.id,
        ...savedWorkout,
        exercises: workoutData // Include the structured exercise data
      },
      message: 'Workout generated and automatically saved to your library',
      savedToLibrary: true
    });

  } catch (error) {
    console.error('Error in generate-workout:', error);
    res.status(500).json({
      success: false,
      error: error.message || 'Failed to generate workout'
    });
  }
});

// Helper functions
function generateTags(workoutData: any, preferences: string, difficulty: string): string[] {
  const tags = new Set<string>();
  
  // Basic tags
  tags.add(difficulty.toLowerCase());
  if (workoutData.duration) tags.add(`${workoutData.duration}min`);
  
  // Extract from preferences
  if (preferences) {
    const prefLower = preferences.toLowerCase();
    if (prefLower.includes('cardio')) tags.add('cardio');
    if (prefLower.includes('strength')) tags.add('strength');
    if (prefLower.includes('flexibility')) tags.add('flexibility');
    if (prefLower.includes('hiit')) tags.add('hiit');
  }
  
  // Extract from exercises
  const allExercises = [
    ...(workoutData.warmup || []),
    ...(workoutData.main || []),
    ...(workoutData.cooldown || [])
  ];
  
  const exerciseText = JSON.stringify(allExercises).toLowerCase();
  
  // Auto-detect workout types
  if (exerciseText.includes('squat') || exerciseText.includes('lunge')) tags.add('legs');
  if (exerciseText.includes('push') || exerciseText.includes('press')) tags.add('upper-body');
  if (exerciseText.includes('plank') || exerciseText.includes('core')) tags.add('core');
  if (exerciseText.includes('run') || exerciseText.includes('jump')) tags.add('cardio');
  
  return Array.from(tags);
}

function calculateCalories(duration: number, difficulty: string): number {
  const caloriesPerMinute = {
    'beginner': 5,
    'intermediate': 8,
    'advanced': 11
  };
  
  const rate = caloriesPerMinute[difficulty.toLowerCase()] || 8;
  return Math.round(duration * rate);
}

function extractMuscleGroups(workoutData: any): string[] {
  const muscleGroups = new Set<string>();
  const allExercises = [
    ...(workoutData.warmup || []),
    ...(workoutData.main || []),
    ...(workoutData.cooldown || [])
  ];
  
  const exerciseText = JSON.stringify(allExercises).toLowerCase();
  
  const muscleKeywords = {
    'chest': ['push-up', 'bench', 'fly', 'chest'],
    'back': ['pull-up', 'row', 'lat', 'back'],
    'legs': ['squat', 'lunge', 'leg', 'calf', 'quad', 'hamstring'],
    'shoulders': ['shoulder', 'overhead', 'lateral', 'delt'],
    'arms': ['bicep', 'tricep', 'curl', 'arm'],
    'core': ['plank', 'crunch', 'abs', 'core', 'oblique'],
    'glutes': ['glute', 'hip', 'bridge']
  };
  
  for (const [muscle, keywords] of Object.entries(muscleKeywords)) {
    if (keywords.some(keyword => exerciseText.includes(keyword))) {
      muscleGroups.add(muscle);
    }
  }
  
  return Array.from(muscleGroups);
}

// Also update the AI trainer message handler to detect workout generation requests
app.post('/api/trainer/message', async (req, res) => {
  try {
    const { message, userId } = req.body;
    
    // Check if user is asking for a workout
    const isWorkoutRequest = message.toLowerCase().match(
      /create|generate|make|design|give me|build|suggest.*workout|routine|exercise|training/
    );
    
    if (isWorkoutRequest) {
      // Extract parameters from the message
      const duration = extractDuration(message) || 30;
      const difficulty = extractDifficulty(message) || 'intermediate';
      const preferences = extractPreferences(message);
      
      // Generate and auto-save workout
      const workoutResponse = await fetch(`${req.protocol}://${req.get('host')}/api/generate-workout`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId, preferences, duration, difficulty })
      });
      
      const workoutData = await workoutResponse.json();
      
      if (workoutData.success) {
        // Return AI response with workout confirmation
        res.json({
          response: `I've created a ${duration}-minute ${difficulty} workout for you! "${workoutData.workout.name}" has been automatically saved to your library. 

Here's what I've prepared:
- Warm-up: ${workoutData.workout.metadata.exercises.warmup.length} exercises
- Main workout: ${workoutData.workout.metadata.exercises.main.length} exercises  
- Cool-down: ${workoutData.workout.metadata.exercises.cooldown.length} exercises

Estimated calories burn: ${workoutData.workout.estimatedCalories} cal

Would you like me to walk you through the exercises, or would you prefer to start the workout now?`,
          workoutGenerated: true,
          workoutId: workoutData.workout.id
        });
        return;
      }
    }
    
    // Regular AI conversation flow
    const aiResponse = await geminiHelper.chat(message, userId);
    res.json({ response: aiResponse });
    
  } catch (error) {
    console.error('Error in trainer message:', error);
    res.status(500).json({ error: 'Failed to process message' });
  }
});

// Helper functions for parameter extraction
function extractDuration(message: string): number | null {
  const match = message.match(/(\d+)\s*(?:minute|min)/i);
  return match ? parseInt(match[1]) : null;
}

function extractDifficulty(message: string): string {
  if (/beginner|easy|simple/i.test(message)) return 'beginner';
  if (/advanced|hard|challenging/i.test(message)) return 'advanced';
  return 'intermediate';
}

function extractPreferences(message: string): string {
  const preferences = [];
  if (/cardio/i.test(message)) preferences.push('cardio');
  if (/strength/i.test(message)) preferences.push('strength');
  if (/flexibility|stretch/i.test(message)) preferences.push('flexibility');
  if (/hiit/i.test(message)) preferences.push('hiit');
  if (/yoga/i.test(message)) preferences.push('yoga');
  return preferences.join(', ') || 'general fitness';
}