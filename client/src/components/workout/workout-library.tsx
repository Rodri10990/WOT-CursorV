// Enhanced WorkoutLibrary component to display auto-saved workouts
// File: client/src/components/workout/workout-library.tsx

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { useQuery } from '@tanstack/react-query';
import { apiRequest } from '@/lib/queryClient';
import { useLocation } from 'wouter';
import { Bot, Clock, Flame, Dumbbell, Star } from 'lucide-react';

interface Workout {
  id: string;
  name: string;
  description: string;
  duration: number;
  difficulty: string;
  category: string;
  autoGenerated?: boolean;
  createdBy?: string;
  metadata?: string;
  createdAt: string;
}

interface WorkoutLibraryProps {
  userId?: number;
  highlightWorkoutId?: string;
}

export function WorkoutLibrary({ userId = 1, highlightWorkoutId }: WorkoutLibraryProps) {
  const [, setLocation] = useLocation();

  const { data: workouts = [], isLoading, refetch } = useQuery({
    queryKey: ['/api/workouts', userId],
    queryFn: async () => {
      const response = await apiRequest("GET", `/api/workouts?userId=${userId}`);
      return response.json();
    }
  });

  const parseMetadata = (metadataString: string) => {
    try {
      return JSON.parse(metadataString);
    } catch {
      return {};
    }
  };

  const handleWorkoutClick = (workout: Workout) => {
    setLocation(`/workouts/${workout.id}`);
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString([], {
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  if (isLoading) {
    return (
      <div className="space-y-4">
        {[1, 2, 3].map((i) => (
          <Card key={i} className="animate-pulse">
            <CardContent className="p-4">
              <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
              <div className="h-3 bg-gray-200 rounded w-1/2"></div>
            </CardContent>
          </Card>
        ))}
      </div>
    );
  }

  if (workouts.length === 0) {
    return (
      <Card className="text-center py-8">
        <CardContent>
          <Dumbbell className="h-12 w-12 mx-auto text-gray-400 mb-4" />
          <CardTitle className="text-lg mb-2">No workouts yet</CardTitle>
          <CardDescription>
            Generate your first workout with your AI trainer!
          </CardDescription>
          <Button 
            className="mt-4"
            onClick={() => setLocation('/ai-trainer')}
          >
            Chat with AI Trainer
          </Button>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-4">
      {workouts.map((workout: Workout) => {
        const isHighlighted = workout.id === highlightWorkoutId;
        const isAutoGenerated = workout.autoGenerated || workout.createdBy === 'ai-agent';
        const metadata = workout.metadata ? parseMetadata(workout.metadata) : {};

        return (
          <Card 
            key={workout.id}
            className={`cursor-pointer transition-all hover:shadow-md ${
              isHighlighted ? 'ring-2 ring-green-500 bg-green-50 dark:bg-green-900/10' : ''
            }`}
            onClick={() => handleWorkoutClick(workout)}
          >
            <CardHeader className="pb-3">
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <CardTitle className="text-lg mb-1">{workout.name}</CardTitle>
                  <CardDescription className="text-sm">
                    {workout.description}
                  </CardDescription>
                </div>
                
                {isAutoGenerated && (
                  <Badge 
                    variant="secondary" 
                    className="bg-blue-100 text-blue-700 dark:bg-blue-900/30 dark:text-blue-400"
                  >
                    <Bot className="h-3 w-3 mr-1" />
                    AI Generated
                  </Badge>
                )}
              </div>
            </CardHeader>
            
            <CardContent className="pt-0">
              <div className="grid grid-cols-3 gap-4 text-center mb-4">
                <div className="flex items-center justify-center text-sm">
                  <Clock className="h-4 w-4 mr-1 text-gray-500" />
                  {workout.duration} min
                </div>
                <div className="flex items-center justify-center text-sm">
                  <Dumbbell className="h-4 w-4 mr-1 text-gray-500" />
                  <span className="capitalize">{workout.difficulty}</span>
                </div>
                {metadata.estimatedCalories && (
                  <div className="flex items-center justify-center text-sm">
                    <Flame className="h-4 w-4 mr-1 text-orange-500" />
                    {metadata.estimatedCalories} cal
                  </div>
                )}
              </div>
              
              {metadata.tags && metadata.tags.length > 0 && (
                <div className="flex flex-wrap gap-1 mb-3">
                  {metadata.tags.slice(0, 4).map((tag: string, index: number) => (
                    <Badge key={index} variant="outline" className="text-xs">
                      #{tag}
                    </Badge>
                  ))}
                  {metadata.tags.length > 4 && (
                    <Badge variant="outline" className="text-xs">
                      +{metadata.tags.length - 4} more
                    </Badge>
                  )}
                </div>
              )}

              {metadata.targetMuscleGroups && metadata.targetMuscleGroups.length > 0 && (
                <div className="mb-3">
                  <p className="text-xs text-gray-600 dark:text-gray-400 mb-1">Target Areas:</p>
                  <div className="flex flex-wrap gap-1">
                    {metadata.targetMuscleGroups.map((group: string, index: number) => (
                      <span 
                        key={index}
                        className="px-2 py-1 bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 text-xs rounded capitalize"
                      >
                        {group}
                      </span>
                    ))}
                  </div>
                </div>
              )}
              
              <div className="flex items-center justify-between text-xs text-gray-500">
                <span>Created {formatDate(workout.createdAt)}</span>
                {workout.category && (
                  <Badge variant="outline" className="text-xs">
                    {workout.category}
                  </Badge>
                )}
              </div>
            </CardContent>
          </Card>
        );
      })}
    </div>
  );
}